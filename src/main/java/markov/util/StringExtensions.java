// Generated by Haxe 3.4.2
package markov.util;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class StringExtensions extends haxe.lang.HxObject
{
	public StringExtensions(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public StringExtensions()
	{
		//line 10 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		markov.util.StringExtensions.__hx_ctor_markov_util_StringExtensions(this);
	}
	
	
	public static void __hx_ctor_markov_util_StringExtensions(markov.util.StringExtensions __hx_this)
	{
	}
	
	
	public static java.lang.String reverse(java.lang.String str)
	{
		//line 17 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		if ( ! ((((boolean) (( str != null )) ))) ) 
		{
			//line 17 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			throw haxe.lang.HaxeException.wrap("FAIL: str != null");
		}
		
		//line 18 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		haxe.root.Array<java.lang.String> arr = haxe.lang.StringExt.split(str, "");
		//line 19 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		arr.reverse();
		//line 20 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		return arr.join("");
	}
	
	
	public static java.lang.String repeat(java.lang.String str, int times)
	{
		//line 30 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		if ( ! ((((boolean) (( str != null )) ))) ) 
		{
			//line 30 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			throw haxe.lang.HaxeException.wrap("FAIL: str != null");
		}
		
		//line 31 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		if ( ! ((((boolean) (( times >= 1 )) ))) ) 
		{
			//line 31 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			throw haxe.lang.HaxeException.wrap("FAIL: times >= 1");
		}
		
		//line 32 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		java.lang.String output = "";
		//line 33 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		{
			//line 33 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			int _g1 = 0;
			//line 33 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			int _g = times;
			//line 33 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			while (( _g1 < _g ))
			{
				//line 33 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
				int i = _g1++;
				//line 34 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
				output += str;
			}
			
		}
		
		//line 36 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		return output;
	}
	
	
	public static boolean contains(java.lang.String str, java.lang.String substr)
	{
		//line 46 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		if ( ! ((((boolean) (( str != null )) ))) ) 
		{
			//line 46 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			throw haxe.lang.HaxeException.wrap("FAIL: str != null");
		}
		
		//line 47 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		if ( ! ((((boolean) (( substr != null )) ))) ) 
		{
			//line 47 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			throw haxe.lang.HaxeException.wrap("FAIL: substr != null");
		}
		
		//line 52 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		return ( haxe.lang.StringExt.indexOf(str, substr, null) >= 0 );
	}
	
	
	public static java.lang.String capitalize(java.lang.String str)
	{
		//line 62 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		if ( ! ((((boolean) (( str != null )) ))) ) 
		{
			//line 62 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
			throw haxe.lang.HaxeException.wrap("FAIL: str != null");
		}
		
		//line 63 "/Users/rlodge/code/misc/MarkovNameGenerator/lib/markov/util/StringExtensions.hx"
		return ( haxe.lang.StringExt.substr(str, 0, 1).toUpperCase() + haxe.lang.StringExt.substr(str, 1, ( str.length() - 1 )) );
	}
	
	
}


